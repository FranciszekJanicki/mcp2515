#ifndef MCP2515_MCP2515_CONFIG_H
#define MCP2515_MCP2515_CONFIG_H

#include <stddef.h>
#include <stdint.h>

#ifdef __cplusplus
extern "C" {
#endif

typedef enum {
    MCP2515_ERR_OK = 0,
    MCP2515_ERR_FAIL,
    MCP2515_ERR_NULL,
} mcp2515_err_t;

typedef enum {
    MCP2515_TXB_NUM_0 = 0x00,
    MCP2515_TXB_NUM_1,
    MCP2515_TXB_NUM_2,
} mcp2515_txb_num_t;

typedef enum {
    MCP2515_RXB_NUM_0 = 0x00,
    MCP2515_RXB_NUM_1,
} mcp2515_rxb_num_t;

typedef enum {
    MCP2515_RXF_NUM_0 = 0x00,
    MCP2515_RXF_NUM_1,
    MCP2515_RXF_NUM_2,
    MCP2515_RXF_NUM_3,
    MCP2515_RXF_NUM_4,
    MCP2515_RXF_NUM_5,
} mcp2515_rxf_num_t;

typedef enum {
    MCP2515_RXM_NUM_0 = 0x00,
    MCP2515_RXM_NUM_1,
} mcp2515_rxm_num_t;

typedef enum {
    MCP2515_RXBF_STATE_DISABLED = 0b000,
    MCP2515_RXBF_STATE_BUFFER_INT = 0b110,
    MCP2515_RXBF_STATE_LOW = 0b100,
    MCP2515_RXBF_STATE_HIGH = 0b101,
} mcp2515_rxbf_state_t;

typedef enum {
    MCP2515_REG_ADDRESS_RXF0SIDH = 0x00,
    MCP2515_REG_ADDRESS_RXF0SIDL = 0x01,
    MCP2515_REG_ADDRESS_RXF0EID8 = 0x02,
    MCP2515_REG_ADDRESS_RXF0EID0 = 0x03,
    MCP2515_REG_ADDRESS_RXM0SIDH = 0x20,
    MCP2515_REG_ADDRESS_RXM0SIDL = 0x21,
    MCP2515_REG_ADDRESS_RXM0EID8 = 0x22,
    MCP2515_REG_ADDRESS_RXM0EID0 = 0x23,
    MCP2515_REG_ADDRESS_CNF3 = 0x28,
    MCP2515_REG_ADDRESS_CNF2 = 0x29,
    MCP2515_REG_ADDRESS_CNF1 = 0x2A,
    MCP2515_REG_ADDRESS_CANINTE = 0x2B,
    MCP2515_REG_ADDRESS_CANINTF = 0x2C,
    MCP2515_REG_ADDRESS_EFLG = 0x2D,
    MCP2515_REG_ADDRESS_TXB0CTRL = 0x30,
    MCP2515_REG_ADDRESS_TXB0SIDH = 0x31,
    MCP2515_REG_ADDRESS_TXB0SIDL = 0x32,
    MCP2515_REG_ADDRESS_TXB0EID8 = 0x33,
    MCP2515_REG_ADDRESS_TXB0EID0 = 0x34,
    MCP2515_REG_ADDRESS_TXB0DLC = 0x35,
    MCP2515_REG_ADDRESS_TXB0D0 = 0x36,
    MCP2515_REG_ADDRESS_TXB0D1 = 0x37,
    MCP2515_REG_ADDRESS_TXB0D2 = 0x38,
    MCP2515_REG_ADDRESS_TXB0D3 = 0x39,
    MCP2515_REG_ADDRESS_TXB0D4 = 0x3A,
    MCP2515_REG_ADDRESS_TXB0D5 = 0x3B,
    MCP2515_REG_ADDRESS_TXB0D6 = 0x3C,
    MCP2515_REG_ADDRESS_TXB0D7 = 0x3D,
    MCP2515_REG_ADDRESS_RXB0CTRL = 0x60,
    MCP2515_REG_ADDRESS_RXB0SIDH = 0x61,
    MCP2515_REG_ADDRESS_RXB0SIDL = 0x62,
    MCP2515_REG_ADDRESS_RXB0EID8 = 0x63,
    MCP2515_REG_ADDRESS_RXB0EID0 = 0x64,
    MCP2515_REG_ADDRESS_RXB0DLC = 0x65,
    MCP2515_REG_ADDRESS_RXB0D0 = 0x66,
    MCP2515_REG_ADDRESS_RXB0D1 = 0x67,
    MCP2515_REG_ADDRESS_RXB0D2 = 0x68,
    MCP2515_REG_ADDRESS_RXB0D3 = 0x69,
    MCP2515_REG_ADDRESS_RXB0D4 = 0x6A,
    MCP2515_REG_ADDRESS_RXB0D5 = 0x6B,
    MCP2515_REG_ADDRESS_RXB0D6 = 0x6C,
    MCP2515_REG_ADDRESS_RXB0D7 = 0x6D,
    MCP2515_REG_ADDRESS_CANSTAT = 0x7E,
    MCP2515_REG_ADDRESS_CANCTRL = 0x7F,
    MCP2515_REG_ADDRESS_BFPCTRL = 0x0C,
    MCP2515_REG_ADDRESS_TXRTSCTRL = 0x0D,
    MCP2515_REG_ADDRESS_TEC = 0x1C,
    MCP2515_REG_ADDRESS_REC = 0x1D,
} mcp2515_reg_address_t;

typedef struct {
} mcp2515_config_t;

typedef struct {
    void* bus_user;
    mcp2515_err_t (*bus_initialize)(void*);
    mcp2515_err_t (*bus_deinitialize)(void*);
    mcp2515_err_t (*bus_receive_data)(void*, uint8_t*, size_t);
    mcp2515_err_t (*bus_transmit_data)(void*, uint8_t const*, size_t);
    mcp2515_err_t (*bus_read_data)(void*, uint8_t, uint8_t*, size_t);
    mcp2515_err_t (*bus_write_data)(void*, uint8_t, uint8_t const*, size_t);
} mcp2515_interface_t;

#ifdef __cplusplus
}
#endif

#endif // MCP2515_MCP2515_CONFIG_H